{"version":3,"sources":["logo.svg","components/Cards.js","components/GridS.js","components/Main.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","OutlinedCard","props","classes","Card","className","variant","CardContent","Typography","color","gutterBottom","date","component","death","negative","positive","CardActions","Button","size","theme","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","height","GridS","Grid","item","xs","covid","pending","Main","console","log","datas","Container","maxWidth","container","map","data","key","hash","paddingBottom","menuButton","marginRight","Navbar","AppBar","position","Toolbar","IconButton","edge","aria-label","href","App","state","axios","get","then","res","setState","this","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a3b693c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n{/*<Cards\r\ndate={props.covid.date}\r\npostive={props.covid.postive}\r\nnegative={props.covid.negative}\r\npending={props.covid.pending}\r\ndeath={props.covid.death}\r\n/>*/}\r\nexport default function OutlinedCard(props) {\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>/</span>;\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Date: {props.date}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Deaths: {props.death || '0'}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          Negative: {props.negative}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Positive: {props.positive}\r\n\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Learn More</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Cards from './Cards';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(20),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    height: 200,\r\n  },\r\n}));\r\n\r\nexport default function GridS(props) {\r\n  const classes = useStyles();\r\n  //console.log(`stuff is : ${JSON.stringify(props.stuff)}`)\r\n  {/*<Paper className={classes.paper}>{props.covid.date}</Paper>*/}\r\n  return(\r\n    <Grid item xs={3}>\r\n        <Cards\r\n        date={props.covid.date}\r\n        positive={props.covid.positive}\r\n        negative={props.covid.negative}\r\n        pending={props.covid.pending}\r\n        death={props.covid.death}\r\n      />\r\n    </Grid>\r\n    );\r\n  }\r\n","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport GridS from './GridS';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n{/*<React.Fragment>\r\n  <CssBaseline />\r\n  <Container maxWidth=\"lg\">\r\n  </Container>\r\n  </React.Fragment>*/}\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(20),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      height: 200,\r\n    },\r\n  }));\r\n\r\nexport default function Main(props) {\r\n  console.log(`data is: ${(props.datas)}`)\r\n  const classes = useStyles()\r\n  return(\r\n  <Container maxWidth='lg'>\r\n  <div className={classes.root}>\r\n    <Grid container spacing={3}>\r\n      {props.datas.map((data) => (\r\n      <GridS key={data.hash} covid = {data}/>\r\n    ))}\r\n    </Grid>\r\n  </div>\r\n</Container>\r\n)\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Navbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Covid Data\r\n          </Typography>\r\n          <Button color=\"inherit\" href = '#'>Home</Button>\r\n          <Button color=\"inherit\" href = '#'>Info</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Main from './components/Main';\nimport Navbar from './components/Navbar';\nimport axios from 'axios'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n  componentDidMount() {\n    axios.get('https://cors-anywhere.herokuapp.com/https://covidtracking.com/api/v1/us/daily.json')\n   .then(res => this.setState({ data: res.data}))\n }\n  render(){\n    console.log(this.state.data)\n    return (\n    <React.Fragment>\n      <Navbar />\n      <Main datas={this.state.data}/>\n    </React.Fragment>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}